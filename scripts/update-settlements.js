#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ GeoNames
 *
 * GeoNames - –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
 * –õ–∏—Ü–µ–Ω–∑–∏—è: Creative Commons Attribution 4.0
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/update-settlements.js
 *
 * –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
 *   - http://download.geonames.org/export/dump/RU.zip (–†–æ—Å—Å–∏—è)
 *   - http://download.geonames.org/export/dump/UA.zip (–£–∫—Ä–∞–∏–Ω–∞)
 */

require('dotenv').config();

const https = require('https');
const fs = require('fs');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');
const unzipper = require('unzipper');
const readline = require('readline');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const GEONAMES_BASE_URL = 'http://download.geonames.org/export/dump/';
const COUNTRIES = ['RU', 'UA'];
const TEMP_DIR = path.join(__dirname, '../.temp-geonames');
const BATCH_SIZE = 500; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏

// Supabase –∫–ª–∏–µ–Ω—Ç
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:54321';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω SUPABASE_SERVICE_ROLE_KEY –∏–ª–∏ NEXT_PUBLIC_SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –¢–∏–ø—ã –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–∞, –ø–æ—Å—ë–ª–∫–∏, –¥–µ—Ä–µ–≤–Ω–∏)
const VALID_FEATURE_CODES = [
  'PPL',    // populated place (–≥–æ—Ä–æ–¥, –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç)
  'PPLA',   // seat of a first-order administrative division (—Ü–µ–Ω—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞)
  'PPLA2',  // seat of a second-order administrative division (—Ü–µ–Ω—Ç—Ä —Ä–∞–π–æ–Ω–∞)
  'PPLA3',  // seat of a third-order administrative division
  'PPLA4',  // seat of a fourth-order administrative division
  'PPLC',   // capital of a political entity (—Å—Ç–æ–ª–∏—Ü–∞)
  'PPLG',   // seat of government of a political entity
  'PPLL',   // populated locality (–ø–æ—Å–µ–ª–µ–Ω–∏–µ)
  'PPLR',   // religious populated place
  'PPLS',   // populated places (–≥–æ—Ä–æ–¥–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
  'PPLX',   // section of populated place (—Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞)
];

// –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function ensureTempDir() {
  if (!fs.existsSync(TEMP_DIR)) {
    fs.mkdirSync(TEMP_DIR, { recursive: true });
  }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
async function downloadFile(url, destination) {
  return new Promise((resolve, reject) => {
    console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ${url}...`);
    const file = fs.createWriteStream(destination);

    https.get(url.replace('http://', 'https://'), (response) => {
      if (response.statusCode === 301 || response.statusCode === 302) {
        // –†–µ–¥–∏—Ä–µ–∫—Ç
        return downloadFile(response.headers.location, destination).then(resolve).catch(reject);
      }

      if (response.statusCode !== 200) {
        reject(new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${response.statusCode}`));
        return;
      }

      response.pipe(file);
      file.on('finish', () => {
        file.close();
        console.log(`‚úÖ –°–∫–∞—á–∞–Ω–æ: ${destination}`);
        resolve();
      });
    }).on('error', (err) => {
      fs.unlinkSync(destination);
      reject(err);
    });
  });
}

// –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP –∞—Ä—Ö–∏–≤–∞
async function extractZip(zipPath, extractTo) {
  return new Promise((resolve, reject) => {
    console.log(`üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ${zipPath}...`);

    fs.createReadStream(zipPath)
      .pipe(unzipper.Extract({ path: extractTo }))
      .on('close', () => {
        console.log(`‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ –≤: ${extractTo}`);
        resolve();
      })
      .on('error', reject);
  });
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ TSV —Ñ–∞–π–ª–∞ GeoNames
function parseGeoNamesLine(line) {
  const parts = line.split('\t');

  return {
    geonameid: parseInt(parts[0]),
    name: parts[1],
    asciiname: parts[2],
    alternatenames: parts[3] ? parts[3].split(',') : [],
    latitude: parseFloat(parts[4]),
    longitude: parseFloat(parts[5]),
    feature_class: parts[6],
    feature_code: parts[7],
    country_code: parts[8],
    admin1: parts[10], // –†–µ–≥–∏–æ–Ω
    admin2: parts[11], // –†–∞–π–æ–Ω
    population: parseInt(parts[14]) || 0,
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
async function processSettlementsFile(filePath, countryCode) {
  return new Promise((resolve, reject) => {
    console.log(`üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ${filePath} (${countryCode})...`);

    const settlements = [];
    const fileStream = fs.createReadStream(filePath);
    const rl = readline.createInterface({
      input: fileStream,
      crlfDelay: Infinity
    });

    let lineCount = 0;
    let validCount = 0;

    rl.on('line', (line) => {
      lineCount++;

      try {
        const data = parseGeoNamesLine(line);

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
        if (data.feature_class === 'P' && VALID_FEATURE_CODES.includes(data.feature_code)) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          const nameRu = data.alternatenames.find(name => /[–∞-—è–ê-–Ø—ë–Å]/.test(name)) || data.name;

          settlements.push({
            geonameid: data.geonameid,
            name: data.name,
            name_ru: nameRu,
            name_alt: data.alternatenames.filter((n, i) => i < 10), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            country_code: data.country_code,
            region: data.admin1,
            district: data.admin2,
            feature_code: data.feature_code,
            feature_class: data.feature_class,
            population: data.population,
            latitude: data.latitude,
            longitude: data.longitude,
          });

          validCount++;
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${lineCount}: ${err.message}`);
      }
    });

    rl.on('close', () => {
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${lineCount} —Å—Ç—Ä–æ–∫, –Ω–∞–π–¥–µ–Ω–æ ${validCount} –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤`);
      resolve(settlements);
    });

    rl.on('error', reject);
  });
}

// –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –±–∞—Ç—á–∞–º–∏
async function insertSettlements(settlements) {
  console.log(`üíæ –í—Å—Ç–∞–≤–∫–∞ ${settlements.length} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î...`);

  let inserted = 0;

  for (let i = 0; i < settlements.length; i += BATCH_SIZE) {
    const batch = settlements.slice(i, i + BATCH_SIZE);

    const { error } = await supabase
      .from('settlements')
      .upsert(batch, { onConflict: 'geonameid' });

    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞ ${i}-${i + batch.length}:`, error);
    } else {
      inserted += batch.length;
      console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${inserted} / ${settlements.length}`);
    }
  }

  return inserted;
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanOldData(countryCode) {
  console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${countryCode}...`);

  const { error } = await supabase
    .from('settlements')
    .delete()
    .eq('country_code', countryCode);

  if (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:`, error);
  } else {
    console.log(`‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã`);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üåç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ GeoNames\n');

  try {
    ensureTempDir();

    for (const countryCode of COUNTRIES) {
      console.log(`\n${'='.repeat(60)}`);
      console.log(`üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ ${countryCode === 'RU' ? '–†–æ—Å—Å–∏–∏' : '–£–∫—Ä–∞–∏–Ω—ã'} (${countryCode})`);
      console.log('='.repeat(60));

      const zipUrl = `${GEONAMES_BASE_URL}${countryCode}.zip`;
      const zipPath = path.join(TEMP_DIR, `${countryCode}.zip`);
      const extractPath = path.join(TEMP_DIR, countryCode);
      const dataFile = path.join(extractPath, `${countryCode}.txt`);

      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
      await downloadFile(zipUrl, zipPath);

      // –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
      await extractZip(zipPath, extractPath);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞
      const settlements = await processSettlementsFile(dataFile, countryCode);

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await cleanOldData(countryCode);

      // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const inserted = await insertSettlements(settlements);

      console.log(`\n‚úÖ ${countryCode}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${inserted} –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤`);
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    console.log(`\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`);
    fs.rmSync(TEMP_DIR, { recursive: true, force: true });

    console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
