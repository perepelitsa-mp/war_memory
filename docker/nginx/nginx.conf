# =====================================================
# Книга Памяти Кавалерово - Nginx Configuration
# =====================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;

    # =====================================================
    # Upstream services
    # =====================================================

    upstream supabase_rest {
        server supabase-rest:3000;
    }

    upstream supabase_auth {
        server supabase-auth:9999;
    }

    upstream supabase_storage {
        server supabase-storage:5000;
    }

    upstream minio {
        server minio:9000;
    }

    # =====================================================
    # HTTP Server (redirect to HTTPS)
    # =====================================================

    server {
        listen 80;
        server_name yourdomain.ru www.yourdomain.ru;

        # ACME challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all HTTP to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # =====================================================
    # HTTPS Server
    # =====================================================

    server {
        listen 443 ssl http2;
        server_name yourdomain.ru www.yourdomain.ru;

        # SSL certificates (Let's Encrypt)
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        # Max upload size (for photos/videos)
        client_max_body_size 150M;

        # =====================================================
        # API Routes
        # =====================================================

        # PostgREST API
        location /api/rest/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://supabase_rest/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Range, apikey' always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # GoTrue Authentication
        location /api/auth/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://supabase_auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, apikey' always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Storage API
        location /api/storage/ {
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://supabase_storage/storage/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Range, apikey' always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # MinIO (media files)
        location /media/ {
            limit_req zone=general burst=20 nodelay;

            proxy_pass http://minio/war-memory/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache media files
            expires 30d;
            add_header Cache-Control "public, immutable";
        }

        # =====================================================
        # Static files and Next.js (будет добавлено позже)
        # =====================================================

        # Frontend (Next.js) - временно перенаправляем на порт 3000
        location / {
            limit_req zone=general burst=10 nodelay;

            proxy_pass http://host.docker.internal:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
}
