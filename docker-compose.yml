version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: war_memory_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-war_memory}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network

  supabase-studio:
    image: supabase/studio:20240101
    container_name: war_memory_studio
    ports:
      - "${STUDIO_PORT:-3010}:3000"
    environment:
      SUPABASE_URL: http://localhost:${POSTGREST_PORT:-3001}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    profiles:
      - dev
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network

  supabase-auth:
    image: ghcr.io/supabase/gotrue:v2.151.0
    container_name: war_memory_auth
    ports:
      - "${GOTRUE_PORT:-9999}:9999"
    environment:
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-war_memory}?search_path=auth
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: "*"
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_EXTERNAL_VK_ENABLED: ${VK_OAUTH_ENABLED:-false}
      GOTRUE_EXTERNAL_VK_CLIENT_ID: ${VK_CLIENT_ID}
      GOTRUE_EXTERNAL_VK_SECRET: ${VK_CLIENT_SECRET}
      GOTRUE_EXTERNAL_VK_REDIRECT_URI: ${VK_REDIRECT_URI}
      GOTRUE_MAILER_AUTOCONFIRM: ${MAILER_AUTOCONFIRM:-true}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT:-587}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_MAILER_SUBJECTS_CONFIRMATION: "Подтвердите email - Книга Памяти Кавалерово"
    depends_on:
      postgres:
        condition: service_healthy
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network

  supabase-rest:
    image: postgrest/postgrest:latest
    container_name: war_memory_rest
    ports:
      - "${POSTGREST_PORT:-3001}:3000"
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-war_memory}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMA:-public}
      PGRST_DB_ANON_ROLE: ${PGRST_DB_ANON_ROLE:-anon}
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: 3600
    depends_on:
      postgres:
        condition: service_healthy
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network

  supabase-realtime:
    image: ghcr.io/supabase/realtime:v2.28.32
    container_name: war_memory_realtime
    ports:
      - "${REALTIME_PORT:-4000}:4000"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-war_memory}
      DB_SSL: "false"
      PORT: 4000
      JWT_SECRET: ${JWT_SECRET}
      REPLICATION_MODE: RLS
      REPLICATION_POLL_INTERVAL: 100
      SECURE_CHANNELS: "true"
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: "true"
    depends_on:
      postgres:
        condition: service_healthy
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network
    profiles:
      - full

  supabase-storage:
    image: ghcr.io/supabase/storage-api:v1.0.6
    container_name: war_memory_storage
    ports:
      - "${STORAGE_PORT:-5000}:5000"
    environment:
      ANON_KEY: ${SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      POSTGREST_URL: http://supabase-rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-war_memory}
      FILE_SIZE_LIMIT: 157286400
      STORAGE_BACKEND: s3
      TENANT_ID: stub
      REGION: ru-central1
      GLOBAL_S3_BUCKET: war-memory
      GLOBAL_S3_ENDPOINT: http://minio:9000
      GLOBAL_S3_FORCE_PATH_STYLE: "true"
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network
    profiles:
      - full

  minio:
    image: minio/minio:latest
    container_name: war_memory_minio
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network

  minio-init:
    image: minio/mc:latest
    container_name: war_memory_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      mc mb myminio/war-memory --ignore-existing;
      mc anonymous set download myminio/war-memory;
      exit 0;
      "
    networks:
      - war_memory_network

  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: war_memory_telegram_bot
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SUPABASE_URL: http://supabase-rest:3000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-war_memory}
    depends_on:
      - supabase-rest
      - postgres
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network
    profiles:
      - full

  nginx:
    image: nginx:alpine
    container_name: war_memory_nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - supabase-rest
      - supabase-auth
      - supabase-storage
    profiles:
      - prod
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - war_memory_network

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  war_memory_network:
    driver: bridge
