name: CI Development

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop, main]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint & Type Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Telegram Bot dependencies
        working-directory: ./telegram-bot
        run: npm ci

      - name: Lint Telegram Bot
        working-directory: ./telegram-bot
        run: npm run lint || true

      - name: Build Telegram Bot
        working-directory: ./telegram-bot
        run: npm run build

      - name: Summary
        run: |
          echo "✅ Lint & Type Check completed"

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Telegram Bot image
        uses: docker/build-push-action@v5
        with:
          context: ./telegram-bot
          file: ./telegram-bot/Dockerfile
          push: false
          tags: war-memory-telegram-bot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "✅ Docker build test completed"

  database-check:
    runs-on: ubuntu-latest
    name: Database Migration Check

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: war_memory_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run migrations
        env:
          PGPASSWORD: postgres
        run: |
          # Apply migrations in order
          for migration in supabase/migrations/*.sql; do
            echo "Applying migration: $migration"
            psql -h localhost -U postgres -d war_memory_test -f "$migration" || exit 1
          done

      - name: Verify tables
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d war_memory_test -c "\dt"
          echo "✅ All migrations applied successfully"

      - name: Summary
        run: |
          echo "✅ Database migration check completed"
